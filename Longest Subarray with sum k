import java.util.ArrayList;
import java.util.HashMap;
public class Array {

    public static int longestSumSubArray1(int arr[], int s){
        int len=0;

        for (int i=0; i<arr.length; i++){
            int sum=0;
            for (int j=i; j<arr.length; j++){
                sum+=arr[j];
                if (s==sum){
                    len=Math.max(len, j-i+1);
                }
            }
        }

        return len;
    }

    public static int longestSumSubArray2(ArrayList<Integer> arr, int k){
        HashMap<Long, Integer> prefixMap = new HashMap<>();
        long sum = 0;
        int maxLen = 0;

        for (int i = 0; i < arr.size(); i++) {
            sum += arr.get(i);

            if (sum == k) {
                maxLen = i + 1;
            }
            if (prefixMap.containsKey(sum - k)) {
                int len = i - prefixMap.get(sum - k);
                maxLen = Math.max(maxLen, len);
            }
            if (!prefixMap.containsKey(sum)) {
                prefixMap.put(sum, i);
            }
        }

        return maxLen;
    }

    public static int longestSumSubArray3(int arr[], int k){
        int right=0, left=0, sum=0, len=0;
        while(right<arr.length){
            sum+=arr[right];
            
            while(left<=right && sum>k){
                sum-=arr[left];
                left++;
            }
            if (sum==k){
                len=Math.max(len, right-left+1);
            }
            right++;
        }

        return len;
    }
    public static void main(String args[]){
        int arr[] = {1,2,3,1,1,1,1,4,2,3};
        ArrayList<Integer> list = new ArrayList<>();
        for (int i=0; i<arr.length; i++){
            list.add(arr[i]);
        }

        System.out.println(longestSumSubArray3(arr, 3));
    }
}
